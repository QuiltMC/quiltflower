package pkg;

public class TestPatternMatching17 {
   public void testSimple(Object obj) {
      if (obj instanceof String str) {// 5
         System.out.println(str.length());// 6
      }

   }// 8

   public void testInverted(Object obj) {
      if (!(obj instanceof String str)) {// 11
         System.out.println("Oh no");// 12
      }

   }// 14

   public void testCompound(Object obj) {
      if (obj instanceof String str && str.contains("hi")) {// 17
         System.out.println(str.length());// 18
      }

   }// 20

   public void testSimpleLoop(Object obj) {
      while(obj instanceof String str) {// 24
         System.out.println(str.length());// 25
         obj = str.intern();// 26
      }

   }// 28

   public void testSimpleLoopUnused(Object obj) {
      while(obj instanceof String str) {// 31
         obj = obj.hashCode() + "";// 32
      }

   }// 34

   public void testInvertedLoop(Object obj) {
      while(!(obj instanceof String str)) {// 37
         System.out.println("Oh no");// 38
         obj = obj.toString();// 39
      }

      System.out.println(str.hashCode());// 41
   }

   public void testInvertedLoopUnused(Object obj) {
      while(!(obj instanceof String str)) {// 45
         System.out.println("Oh no");// 46
         obj = obj.toString();// 47
      }

   }

   public void testCompoundLoop(Object obj) {
      while(obj instanceof String str && str.contains("hi")) {// 52
         obj = str.substring(1);// 53
      }

   }// 55

   public boolean testReturn(Object obj) {
      if (obj instanceof String s && s.length() > 5) {// 58
         return true;
      }

      return false;
   }

   public int testReturnTernary(Object obj) {
      return obj instanceof String s ? s.length() : 0;// 62
   }

   public int testReturnTernaryComplex(Object obj) {
      return (!(obj instanceof String s) || s.length() <= 5) && !(obj instanceof Integer) ? 1 : 4;// 66
   }

   public void testLoop(Object obj) {
      while(obj instanceof String s && s.length() > 10) {// 70
         s = s.substring(1);// 71
         obj = s.substring(1);// 72
         System.out.println(s);// 74
      }

   }// 76

   public void testSimpleReturn(Object obj) {
      if (obj instanceof String str && str.length() > 5) {// 79 80
         return;// 81
      }

      System.out.println("test");// 85
   }// 86

   public void testMessyLVT(Object obj) {
      str = "a";// 90
      String b = "b";// 91
      String c = "c";// 92
      String d = "d";// 93
      String e = "e";// 94
      String f = "f";// 95
      String g = "g";// 96
      String h = "h";// 97
      String var10 = "i";// 98
      if (obj instanceof String str) {// 100
         System.out.println(str.length());// 101
      }

   }// 103
}

class 'pkg/TestPatternMatching17' {
   method 'testSimple (Ljava/lang/Object;)V' {
      0      4
      1      4
      2      4
      3      4
      4      4
      b      4
      c      5
      d      5
      e      5
      f      5
      10      5
      11      5
      12      5
      13      5
      16      8
   }

   method 'testInverted (Ljava/lang/Object;)V' {
      0      11
      1      11
      2      11
      3      11
      4      11
      b      11
      f      12
      10      12
      11      12
      12      12
      13      12
      14      12
      17      15
   }

   method 'testCompound (Ljava/lang/Object;)V' {
      0      18
      1      18
      2      18
      3      18
      4      18
      b      18
      c      18
      d      18
      e      18
      f      18
      10      18
      11      18
      12      18
      15      19
      16      19
      17      19
      18      19
      19      19
      1a      19
      1b      19
      1c      19
      1f      22
   }

   method 'testSimpleLoop (Ljava/lang/Object;)V' {
      0      25
      1      25
      2      25
      3      25
      b      25
      c      26
      d      26
      e      26
      f      26
      10      26
      11      26
      12      26
      13      26
      14      26
      15      26
      16      27
      17      27
      18      27
      19      27
      1a      27
      1e      30
   }

   method 'testSimpleLoopUnused (Ljava/lang/Object;)V' {
      0      33
      1      33
      2      33
      3      33
      b      33
      c      34
      d      34
      e      34
      f      34
      10      34
      11      34
      12      34
      13      34
      14      34
      15      34
      19      37
   }

   method 'testInvertedLoop (Ljava/lang/Object;)V' {
      0      40
      1      40
      2      40
      3      40
      4      40
      b      40
      c      45
      d      45
      e      45
      f      41
      10      41
      11      41
      12      41
      13      41
      14      41
      15      41
      16      41
      17      42
      18      42
      19      42
      1a      42
      1b      42
      1c      45
      1d      45
      1e      45
      1f      45
      20      45
      21      45
      22      45
      23      45
      24      45
      25      45
      26      46
      27      46
      28      46
   }

   method 'testInvertedLoopUnused (Ljava/lang/Object;)V' {
      0      49
      1      49
      2      49
      3      49
      4      49
      b      49
      c      54
      d      54
      e      54
      f      50
      10      50
      11      50
      12      50
      13      50
      14      50
      15      50
      16      50
      17      51
      18      51
      19      51
      1a      51
      1b      51
      1c      54
      1d      54
      1e      54
   }

   method 'testCompoundLoop (Ljava/lang/Object;)V' {
      0      57
      1      57
      2      57
      3      57
      b      57
      c      57
      d      57
      e      57
      f      57
      10      57
      11      57
      15      58
      16      58
      17      58
      18      58
      19      58
      1a      58
      1e      61
   }

   method 'testReturn (Ljava/lang/Object;)Z' {
      0      64
      1      64
      2      64
      3      64
      4      64
      b      64
      c      64
      d      64
      e      64
      f      64
      10      64
      11      64
      14      65
      18      68
      19      65
   }

   method 'testReturnTernary (Ljava/lang/Object;)I' {
      0      72
      1      72
      2      72
      3      72
      4      72
      b      72
      c      72
      d      72
      e      72
      f      72
      13      72
      14      72
   }

   method 'testReturnTernaryComplex (Ljava/lang/Object;)I' {
      0      76
      1      76
      2      76
      3      76
      4      76
      b      76
      c      76
      d      76
      e      76
      f      76
      10      76
      11      76
      14      76
      15      76
      16      76
      17      76
      18      76
      1b      76
      1f      76
      20      76
   }

   method 'testLoop (Ljava/lang/Object;)V' {
      0      80
      1      80
      2      80
      3      80
      b      80
      c      80
      d      80
      e      80
      f      80
      10      80
      11      80
      12      80
      15      81
      16      81
      17      81
      18      81
      19      81
      1a      81
      1b      82
      1c      82
      1d      82
      1e      82
      1f      82
      20      82
      21      83
      22      83
      23      83
      24      83
      25      83
      26      83
      27      83
      2b      86
   }

   method 'testSimpleReturn (Ljava/lang/Object;)V' {
      0      89
      1      89
      2      89
      3      89
      4      89
      b      89
      c      89
      d      89
      e      89
      f      89
      10      89
      11      89
      14      90
      15      93
      16      93
      17      93
      18      93
      19      93
      1a      93
      1b      93
      1c      93
      1d      94
   }

   method 'testMessyLVT (Ljava/lang/Object;)V' {
      0      97
      1      97
      2      97
      3      98
      4      98
      5      98
      6      99
      7      99
      8      99
      9      99
      a      100
      b      100
      c      100
      d      100
      e      101
      f      101
      10      101
      11      101
      12      102
      13      102
      14      102
      15      102
      16      103
      17      103
      18      103
      19      103
      1a      104
      1b      104
      1c      104
      1d      104
      1e      105
      1f      105
      20      105
      21      105
      22      106
      23      106
      24      106
      25      106
      26      106
      2d      106
      2e      107
      2f      107
      30      107
      31      107
      32      107
      33      107
      34      107
      35      107
      38      110
   }
}

Lines mapping:
5 <-> 5
6 <-> 6
8 <-> 9
11 <-> 12
12 <-> 13
14 <-> 16
17 <-> 19
18 <-> 20
20 <-> 23
24 <-> 26
25 <-> 27
26 <-> 28
28 <-> 31
31 <-> 34
32 <-> 35
34 <-> 38
37 <-> 41
38 <-> 42
39 <-> 43
41 <-> 46
45 <-> 50
46 <-> 51
47 <-> 52
52 <-> 58
53 <-> 59
55 <-> 62
58 <-> 65
62 <-> 73
66 <-> 77
70 <-> 81
71 <-> 82
72 <-> 83
74 <-> 84
76 <-> 87
79 <-> 90
80 <-> 90
81 <-> 91
85 <-> 94
86 <-> 95
90 <-> 98
91 <-> 99
92 <-> 100
93 <-> 101
94 <-> 102
95 <-> 103
96 <-> 104
97 <-> 105
98 <-> 106
100 <-> 107
101 <-> 108
103 <-> 111
Not mapped:
42
49
