package pkg;

import kotlin.DeprecationLevel;
import kotlin.Metadata;
import kotlin.NoWhenBranchMatchedException;

@Metadata(
   mv = {1, 6, 0},
   k = 1,
   xi = 48,
   d1 = {"\u0000\u0014\n\u0002\u0018\u0002\n\u0002\u0010\u0010\n\u0002\b\u0002\n\u0002\u0010\u0002\n\u0002\b\b\b\u0086\u0001\u0018\u00002\b\u0012\u0004\u0012\u00020\u00000\u0001B\u0007\b\u0002¢\u0006\u0002\u0010\u0002J\u0006\u0010\u0003\u001a\u00020\u0004J\u0006\u0010\u0005\u001a\u00020\u0004J\u0006\u0010\u0006\u001a\u00020\u0004J\u0006\u0010\u0007\u001a\u00020\u0004J\u0006\u0010\b\u001a\u00020\u0004j\u0002\b\tj\u0002\b\nj\u0002\b\u000b¨\u0006\f"},
   d2 = {"Lpkg/TestKotlinEnumWhen;", "", "(Ljava/lang/String;I)V", "testAnotherEnum", "", "testConsecutive", "testConsecutiveMixed", "testExpression", "testStatement", "FIRST", "SECOND", "THIRD", "quiltflower_testDataKotlin"}
)
public enum TestKotlinEnumWhen {
   FIRST,
   SECOND,
   THIRD;

   public final void testStatement() {
      switch(this) {// 7
         case FIRST:
            System.out.println("first!");// 8
            break;
         case SECOND:
            System.out.println("second!");// 9
            break;
         case THIRD:
            System.out.println("third!");// 10
      }

   }// 12

   public final void testExpression() {
      String var10000;
      switch(this) {// 16
         case FIRST:
            var10000 = "first!";// 17
            break;
         case SECOND:
            var10000 = "second!";// 18
            break;
         case THIRD:
            var10000 = "third!";// 19
            break;
         default:
            throw new NoWhenBranchMatchedException();
      }

      String var1 = var10000;
      System.out.println(var1);// 15
   }// 22

   public final void testAnotherEnum() {
      DeprecationLevel level = testAnotherEnum$getLevel();// 28
      switch(level) {
         case WARNING:
            System.out.println("warning " + level);// 29
            break;
         case ERROR:
            System.out.println("error " + level);// 30
            break;
         case HIDDEN:
            System.out.println("hidden " + level);// 31
      }

   }// 33

   public final void testConsecutive() {
      switch(this) {// 36
         case FIRST:
            System.out.println("first!");// 37
            break;
         case SECOND:
            System.out.println("second!");// 38
            break;
         case THIRD:
            System.out.println("third!");// 39
      }

      switch(this) {// 42
         case FIRST:
            System.out.println("first, again!");// 43
            break;
         case SECOND:
            System.out.println("second, again!");// 44
            break;
         case THIRD:
            System.out.println("third, again!");// 45
      }

   }// 47

   public final void testConsecutiveMixed() {
      DeprecationLevel level = testConsecutiveMixed$getLevel-0();// 53
      switch(level) {
         case WARNING:
            System.out.println("warning " + level);// 54
            break;
         case ERROR:
            System.out.println("error " + level);// 55
            break;
         case HIDDEN:
            System.out.println("hidden " + level);// 56
      }

      switch(this) {// 59
         case FIRST:
            System.out.println("first!");// 60
            break;
         case SECOND:
            System.out.println("second!");// 61
            break;
         case THIRD:
            System.out.println("third!");// 62
      }

   }// 64

   private static final DeprecationLevel testAnotherEnum$getLevel() {
      throw new Exception();// 26
   }

   private static final DeprecationLevel testConsecutiveMixed$getLevel_0/* $FF was: testConsecutiveMixed$getLevel-0*/() {
      throw new Exception();// 51
   }
}

class 'pkg/TestKotlinEnumWhen' {
   method 'testStatement ()V' {
      0      19
      9      19
      24      21
      25      21
      26      21
      27      21
      28      21
      2a      21
      2b      21
      2c      21
      2d      22
      30      24
      31      24
      32      24
      33      24
      34      24
      36      24
      37      24
      38      24
      39      25
      3c      27
      3d      27
      3e      27
      3f      27
      40      27
      42      27
      45      30
   }

   method 'testExpression ()V' {
      0      34
      9      34
      24      36
      25      36
      26      37
      29      39
      2a      39
      2b      40
      2e      42
      2f      42
      30      43
      3a      45
      3b      48
      3c      49
      3d      49
      3e      49
      3f      49
      40      49
      41      49
      42      49
      43      50
   }

   method 'testAnotherEnum ()V' {
      0      53
      1      53
      2      53
      3      53
      7      54
      c      54
      28      56
      29      56
      2a      56
      2b      56
      2c      56
      2d      56
      2e      56
      2f      56
      30      56
      32      56
      33      56
      34      56
      35      57
      38      59
      39      59
      3a      59
      3b      59
      3c      59
      3d      59
      3e      59
      3f      59
      40      59
      42      59
      43      59
      44      59
      45      60
      48      62
      49      62
      4a      62
      4b      62
      4c      62
      4d      62
      4e      62
      4f      62
      50      62
      52      62
      55      65
   }

   method 'testConsecutive ()V' {
      0      68
      9      68
      24      70
      25      70
      26      70
      27      70
      28      70
      2a      70
      2b      70
      2c      70
      2d      71
      30      73
      31      73
      32      73
      33      73
      34      73
      36      73
      37      73
      38      73
      39      74
      3c      76
      3d      76
      3e      76
      3f      76
      40      76
      42      76
      45      79
      4e      79
      68      81
      69      81
      6a      81
      6b      81
      6c      81
      6e      81
      6f      81
      70      81
      71      82
      74      84
      75      84
      76      84
      77      84
      78      84
      7a      84
      7b      84
      7c      84
      7d      85
      80      87
      81      87
      82      87
      83      87
      84      87
      86      87
      89      90
   }

   method 'testConsecutiveMixed ()V' {
      0      93
      1      93
      2      93
      3      93
      7      94
      c      94
      28      96
      29      96
      2a      96
      2b      96
      2c      96
      2d      96
      2e      96
      2f      96
      30      96
      32      96
      33      96
      34      96
      35      97
      38      99
      39      99
      3a      99
      3b      99
      3c      99
      3d      99
      3e      99
      3f      99
      40      99
      42      99
      43      99
      44      99
      45      100
      48      102
      49      102
      4a      102
      4b      102
      4c      102
      4d      102
      4e      102
      4f      102
      50      102
      52      102
      55      105
      5e      105
      78      107
      79      107
      7a      107
      7b      107
      7c      107
      7e      107
      7f      107
      80      107
      81      108
      84      110
      85      110
      86      110
      87      110
      88      110
      8a      110
      8b      110
      8c      110
      8d      111
      90      113
      91      113
      92      113
      93      113
      94      113
      96      113
      99      116
   }

   method 'testAnotherEnum$getLevel ()Lkotlin/DeprecationLevel;' {
      7      119
   }

   method 'testConsecutiveMixed$getLevel-0 ()Lkotlin/DeprecationLevel;' {
      7      123
   }
}

Lines mapping:
7 <-> 20
8 <-> 22
9 <-> 25
10 <-> 28
12 <-> 31
15 <-> 50
16 <-> 35
17 <-> 37
18 <-> 40
19 <-> 43
22 <-> 51
26 <-> 120
28 <-> 54
29 <-> 57
30 <-> 60
31 <-> 63
33 <-> 66
36 <-> 69
37 <-> 71
38 <-> 74
39 <-> 77
42 <-> 80
43 <-> 82
44 <-> 85
45 <-> 88
47 <-> 91
51 <-> 124
53 <-> 94
54 <-> 97
55 <-> 100
56 <-> 103
59 <-> 106
60 <-> 108
61 <-> 111
62 <-> 114
64 <-> 117
