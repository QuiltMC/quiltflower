package pkg;

import kotlin.DeprecationLevel;
import kotlin.Metadata;
import kotlin.NoWhenBranchMatchedException;

@Metadata(
   mv = {1, 6, 0},
   k = 1,
   xi = 48,
   d1 = {"\u0000\u0014\n\u0002\u0018\u0002\n\u0002\u0010\u0010\n\u0002\b\u0002\n\u0002\u0010\u0002\n\u0002\b\b\b\u0086\u0001\u0018\u00002\b\u0012\u0004\u0012\u00020\u00000\u0001B\u0007\b\u0002¢\u0006\u0002\u0010\u0002J\u0006\u0010\u0003\u001a\u00020\u0004J\u0006\u0010\u0005\u001a\u00020\u0004J\u0006\u0010\u0006\u001a\u00020\u0004J\u0006\u0010\u0007\u001a\u00020\u0004J\u0006\u0010\b\u001a\u00020\u0004j\u0002\b\tj\u0002\b\nj\u0002\b\u000b¨\u0006\f"},
   d2 = {"Lpkg/TestKotlinEnumWhen;", "", "(Ljava/lang/String;I)V", "testAnotherEnum", "", "testConsecutive", "testConsecutiveMixed", "testExpression", "testStatement", "FIRST", "SECOND", "THIRD", "quiltflower_testDataKotlin"}
)
public enum TestKotlinEnumWhen {
   FIRST,
   SECOND,
   THIRD;

   public final void testStatement() {
      switch(this) {// 7
         case FIRST:
            System.out.println("first!");// 8
            break;
         case SECOND:
            System.out.println("second!");// 9
            break;
         case THIRD:
            System.out.println("third!");// 10
      }

   }// 12

   public final void testExpression() {
      String var10000;
      switch(this) {// 16
         case FIRST:
            var10000 = "first!";// 17
            break;
         case SECOND:
            var10000 = "second!";// 18
            break;
         case THIRD:
            var10000 = "third!";// 19
            break;
         default:
            throw new NoWhenBranchMatchedException();
      }

      String var1 = var10000;
      System.out.println(var1);// 15
   }// 22

   public final void testAnotherEnum() {
      DeprecationLevel level = testAnotherEnum$getLevel();// 28
      switch(level) {
         case WARNING:
            System.out.println("warning " + level);// 29
            break;
         case ERROR:
            System.out.println("error " + level);// 30
            break;
         case HIDDEN:
            System.out.println("hidden " + level);// 31
      }

   }// 33

   public final void testConsecutive() {
      switch(this) {// 36
         case FIRST:
            System.out.println("first!");// 37
            break;
         case SECOND:
            System.out.println("second!");// 38
            break;
         case THIRD:
            System.out.println("third!");// 39
      }

      switch(this) {// 42
         case FIRST:
            System.out.println("first, again!");// 43
            break;
         case SECOND:
            System.out.println("second, again!");// 44
            break;
         case THIRD:
            System.out.println("third, again!");// 45
      }

   }// 47

   public final void testConsecutiveMixed() {
      DeprecationLevel level = testConsecutiveMixed$getLevel-0();// 53
      switch(level) {
         case WARNING:
            System.out.println("warning " + level);// 54
            break;
         case ERROR:
            System.out.println("error " + level);// 55
            break;
         case HIDDEN:
            System.out.println("hidden " + level);// 56
      }

      switch(this) {// 59
         case FIRST:
            System.out.println("first!");// 60
            break;
         case SECOND:
            System.out.println("second!");// 61
            break;
         case THIRD:
            System.out.println("third!");// 62
      }

   }// 64

   private static final DeprecationLevel testAnotherEnum$getLevel() {
      throw new Exception();// 26
   }

   private static final DeprecationLevel testConsecutiveMixed$getLevel_0/* $QF was: testConsecutiveMixed$getLevel-0*/() {
      throw new Exception();// 51
   }
}

class 'pkg/TestKotlinEnumWhen' {
   method 'testStatement ()V' {
      0      19
      9      19
      24      21
      25      21
      26      21
      27      21
      28      21
      2a      21
      2b      21
      2c      21
      2d      22
      30      24
      31      24
      32      24
      33      24
      34      24
      36      24
      37      24
      38      24
      39      25
      3c      27
      3d      27
      3e      27
      3f      27
      40      27
      42      27
      45      30
   }

   method 'testExpression ()V' {
      0      34
      9      34
      24      36
      25      36
      26      37
      29      39
      2a      39
      2b      40
      2e      42
      2f      42
      30      43
      3a      45
      3b      48
      3c      49
      3d      49
      3e      49
      3f      49
      40      49
      41      49
      42      49
      43      50
   }

   method 'testAnotherEnum ()V' {
      0      53
      1      53
      2      53
      3      53
      7      54
      c      54
      2f      56
      30      56
      34      56
      38      56
      39      56
      3a      56
      3b      56
      3c      56
      3d      56
      3f      56
      40      56
      41      56
      42      57
      4c      59
      4d      59
      51      59
      55      59
      56      59
      57      59
      58      59
      59      59
      5a      59
      5c      59
      5d      59
      5e      59
      5f      60
      69      62
      6a      62
      6e      62
      72      62
      73      62
      74      62
      75      62
      76      62
      77      62
      79      62
      7c      65
   }

   method 'testConsecutive ()V' {
      0      68
      9      68
      24      70
      25      70
      26      70
      27      70
      28      70
      2a      70
      2b      70
      2c      70
      2d      71
      30      73
      31      73
      32      73
      33      73
      34      73
      36      73
      37      73
      38      73
      39      74
      3c      76
      3d      76
      3e      76
      3f      76
      40      76
      42      76
      45      79
      4e      79
      68      81
      69      81
      6a      81
      6b      81
      6c      81
      6e      81
      6f      81
      70      81
      71      82
      74      84
      75      84
      76      84
      77      84
      78      84
      7a      84
      7b      84
      7c      84
      7d      85
      80      87
      81      87
      82      87
      83      87
      84      87
      86      87
      89      90
   }

   method 'testConsecutiveMixed ()V' {
      0      93
      1      93
      2      93
      3      93
      7      94
      c      94
      2f      96
      30      96
      34      96
      38      96
      39      96
      3a      96
      3b      96
      3c      96
      3d      96
      3f      96
      40      96
      41      96
      42      97
      4c      99
      4d      99
      51      99
      55      99
      56      99
      57      99
      58      99
      59      99
      5a      99
      5c      99
      5d      99
      5e      99
      5f      100
      69      102
      6a      102
      6e      102
      72      102
      73      102
      74      102
      75      102
      76      102
      77      102
      79      102
      7c      105
      85      105
      a0      107
      a1      107
      a2      107
      a3      107
      a4      107
      a6      107
      a7      107
      a8      107
      a9      108
      ac      110
      ad      110
      ae      110
      af      110
      b0      110
      b2      110
      b3      110
      b4      110
      b5      111
      b8      113
      b9      113
      ba      113
      bb      113
      bc      113
      be      113
      c1      116
   }

   method 'testAnotherEnum$getLevel ()Lkotlin/DeprecationLevel;' {
      7      119
   }

   method 'testConsecutiveMixed$getLevel-0 ()Lkotlin/DeprecationLevel;' {
      7      123
   }
}

Lines mapping:
7 <-> 20
8 <-> 22
9 <-> 25
10 <-> 28
12 <-> 31
15 <-> 50
16 <-> 35
17 <-> 37
18 <-> 40
19 <-> 43
22 <-> 51
26 <-> 120
28 <-> 54
29 <-> 57
30 <-> 60
31 <-> 63
33 <-> 66
36 <-> 69
37 <-> 71
38 <-> 74
39 <-> 77
42 <-> 80
43 <-> 82
44 <-> 85
45 <-> 88
47 <-> 91
51 <-> 124
53 <-> 94
54 <-> 97
55 <-> 100
56 <-> 103
59 <-> 106
60 <-> 108
61 <-> 111
62 <-> 114
64 <-> 117
