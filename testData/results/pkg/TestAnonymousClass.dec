package pkg;

public abstract class TestAnonymousClass {
   public static final Runnable R3 = new Runnable() {
      @Override
      public void run() {
         int a = 5;// 36
         int b = 5;// 37
      }// 38
   };
   public static final Runnable R = new Runnable() {
      @Override
      public void run() {
         int a = 5;// 53
         int b = 5;// 54
      }// 55
   };
   public static final Runnable R1 = new Runnable() {
      @Override
      public void run() {
         int a = 5;// 61
         int b = 5;// 62
      }// 63
   };
   private final TestAnonymousClass.InnerRecursive y = new TestAnonymousClass.InnerRecursive(new TestAnonymousClass.InnerRecursive((TestAnonymousClass.InnerRecursive)null) {
      @Override
      void foo() {
         int a = 5;// 83
         int b = 5;// 84
         int g = 5;// 85
      }// 86
   }) {
      int v = 5;
      int t = 5;
      int j = 5;
      int o = 5;
   };
   private final TestAnonymousClass.InnerRecursive x = new TestAnonymousClass.InnerRecursive(new TestAnonymousClass.InnerRecursive((TestAnonymousClass.InnerRecursive)null) {
      @Override
      void foo() {
         int a = 5;// 98
         int b = 5;// 99
         int g = 5;// 100
      }// 101
   }) {
      int v = 5;
      int t = 5;
      int j = 5;
      int o = 5;
   };

   void foo(int i) throws Exception {
      if (i > 0) {// 10
         TestAnonymousClass.I r = new TestAnonymousClass.I() {// 11
            @Override
            public void foo() throws Exception {
               int a = 5;// 13
               int b = 5;// 14
            }// 15
         };
         r.foo();// 17
      } else {
         int x = 5;// 20
         System.out.println(5);// 21
      }

   }// 23

   void bar() {
      ((<undefinedtype>)(new Object() {// 30
         public void foo(String s) {
            System.out.println(s);// 28
         }// 29
      })).foo("Hello world");// 26
   }// 31

   void boo() {
      int a = 5;// 43
   }// 44

   void zoo() {
      int a = 5;// 47
   }// 48

   interface I {
      void foo() throws Exception;
   }

   private static class Inner {
      private static Runnable R_I = new Runnable() {
         @Override
         public void run() {
            int a = 5;// 74
            int b = 5;// 75
         }// 76
      };
   }

   static class InnerRecursive {
      TestAnonymousClass.InnerRecursive r;

      public InnerRecursive(TestAnonymousClass.InnerRecursive r) {
         this.r = r;// 113
      }// 114

      void foo() {
      }// 118
   }
}

class 'pkg/TestAnonymousClass$3' {
   method 'run ()V' {
      0      6
      1      6
      2      7
      3      7
      4      8
   }
}

class 'pkg/TestAnonymousClass$4' {
   method 'run ()V' {
      0      13
      1      13
      2      14
      3      14
      4      15
   }
}

class 'pkg/TestAnonymousClass$5' {
   method 'run ()V' {
      0      20
      1      20
      2      21
      3      21
      4      22
   }
}

class 'pkg/TestAnonymousClass$6' {
   method 'foo ()V' {
      0      27
      1      27
      2      28
      3      28
      4      29
      5      29
      6      30
   }
}

class 'pkg/TestAnonymousClass$8' {
   method 'foo ()V' {
      0      40
      1      40
      2      41
      3      41
      4      42
      5      42
      6      43
   }
}

class 'pkg/TestAnonymousClass' {
   method 'foo (I)V' {
      0      52
      1      52
      c      53
      d      60
      e      60
      f      60
      10      60
      11      60
      12      60
      16      62
      17      62
      18      63
      19      63
      1a      63
      1b      63
      1c      63
      1f      66
   }

   method 'bar ()V' {
      8      73
      9      73
      a      69
      b      69
      c      69
      d      74
   }

   method 'boo ()V' {
      0      77
      1      77
      2      78
   }

   method 'zoo ()V' {
      0      81
      1      81
      2      82
   }
}

class 'pkg/TestAnonymousClass$1' {
   method 'foo ()V' {
      0      56
      1      56
      2      57
      3      57
      4      58
   }
}

class 'pkg/TestAnonymousClass$2' {
   method 'foo (Ljava/lang/String;)V' {
      0      71
      1      71
      2      71
      3      71
      4      71
      5      71
      6      71
      7      72
   }
}

class 'pkg/TestAnonymousClass$Inner$1' {
   method 'run ()V' {
      0      92
      1      92
      2      93
      3      93
      4      94
   }
}

class 'pkg/TestAnonymousClass$InnerRecursive' {
   method '<init> (Lpkg/TestAnonymousClass$InnerRecursive;)V' {
      4      102
      5      102
      6      102
      7      102
      8      102
      9      103
   }

   method 'foo ()V' {
      0      106
   }
}

Lines mapping:
10 <-> 53
11 <-> 54
13 <-> 57
14 <-> 58
15 <-> 59
17 <-> 61
20 <-> 63
21 <-> 64
23 <-> 67
26 <-> 74
28 <-> 72
29 <-> 73
30 <-> 70
31 <-> 75
36 <-> 7
37 <-> 8
38 <-> 9
43 <-> 78
44 <-> 79
47 <-> 82
48 <-> 83
53 <-> 14
54 <-> 15
55 <-> 16
61 <-> 21
62 <-> 22
63 <-> 23
74 <-> 93
75 <-> 94
76 <-> 95
83 <-> 28
84 <-> 29
85 <-> 30
86 <-> 31
98 <-> 41
99 <-> 42
100 <-> 43
101 <-> 44
113 <-> 103
114 <-> 104
118 <-> 107
Not mapped:
18
112
